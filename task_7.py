# -*- coding: utf-8 -*-
"""TASK 7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LuW406cLK2D5mYOtBMDj8E3g3XH1m4RA
"""

import sqlite3

# Connect and create table
conn = sqlite3.connect("sales_data.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS sales (
    product TEXT,
    quantity INTEGER,
    price REAL
)
""")

# Insert sample data
sample_data = [
    ("Apple", 10, 1.5),
    ("Banana", 20, 0.5),
    ("Apple", 5, 1.5),
    ("Orange", 8, 1.2),
    ("Banana", 10, 0.5),
    ("Orange", 12, 1.2)
]
cursor.executemany("INSERT INTO sales (product, quantity, price) VALUES (?, ?, ?)", sample_data)

conn.commit()
conn.close()

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

# Connect to database
conn = sqlite3.connect("sales_data.db")

# Run SQL Query
query = """
SELECT
    product,
    SUM(quantity) AS total_qty,
    SUM(quantity * price) AS revenue
FROM sales
GROUP BY product
"""

df = pd.read_sql_query(query, conn)
conn.close()

# Print Results
print("Sales Summary:")
print(df)

# Plot bar chart
df.plot(kind='bar', x='product', y='revenue', legend=False)
plt.title("Revenue by Product")
plt.ylabel("Revenue ($)")
plt.tight_layout()
plt.savefig("sales_chart.png")  # optional
plt.show()

# Create a Python script file with the full solution to Task 7

import os

code = """
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Create and populate the database
conn = sqlite3.connect("sales_data.db")
cursor = conn.cursor()

cursor.execute(\"\"\"
CREATE TABLE IF NOT EXISTS sales (
    product TEXT,
    quantity INTEGER,
    price REAL
)
\"\"\")

sample_data = [
    ("Apple", 10, 1.5),
    ("Banana", 20, 0.5),
    ("Apple", 5, 1.5),
    ("Orange", 8, 1.2),
    ("Banana", 10, 0.5),
    ("Orange", 12, 1.2)
]
cursor.executemany("INSERT INTO sales (product, quantity, price) VALUES (?, ?, ?)", sample_data)
conn.commit()

# Step 2: Run query and analyze
query = \"""
SELECT
    product,
    SUM(quantity) AS total_qty,
    SUM(quantity * price) AS revenue
FROM sales
GROUP BY product
\"""
df = pd.read_sql_query(query, conn)
conn.close()

# Step 3: Print results
print("Sales Summary:")
print(df)

# Step 4: Plot bar chart
df.plot(kind='bar', x='product', y='revenue', legend=False)
plt.title("Revenue by Product")
plt.ylabel("Revenue ($)")
plt.tight_layout()
plt.savefig("sales_chart.png")
plt.show()
"""

# Define the directory path
directory = "/mnt/data/"
# Define the file path
file_path = os.path.join(directory, "task7_sales_summary.py")

# Create the directory if it doesn't exist
if not os.path.exists(directory):
    os.makedirs(directory)

# Save the script to a .py file
with open(file_path, "w") as f:
    f.write(code)

file_path

# Create the SQLite database file (sales_data.db) with the sample sales table and data

import sqlite3

db_path = "/mnt/data/sales_data.db"

conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# Create table
cursor.execute("""
CREATE TABLE IF NOT EXISTS sales (
    product TEXT,
    quantity INTEGER,
    price REAL
)
""")

# Insert sample data
sample_data = [
    ("Apple", 10, 1.5),
    ("Banana", 20, 0.5),
    ("Apple", 5, 1.5),
    ("Orange", 8, 1.2),
    ("Banana", 10, 0.5),
    ("Orange", 12, 1.2)
]
cursor.executemany("INSERT INTO sales (product, quantity, price) VALUES (?, ?, ?)", sample_data)
conn.commit()
conn.close()

db_path

# Re-run the script logic to generate and save the bar chart screenshot

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

# Connect to the existing database
conn = sqlite3.connect("/mnt/data/sales_data.db")

# Run the SQL query
query = """
SELECT
    product,
    SUM(quantity) AS total_qty,
    SUM(quantity * price) AS revenue
FROM sales
GROUP BY product
"""
df = pd.read_sql_query(query, conn)
conn.close()

# Plot the bar chart
plt.figure(figsize=(6,4))
df.plot(kind='bar', x='product', y='revenue', legend=False)
plt.title("Revenue by Product")
plt.ylabel("Revenue ($)")
plt.tight_layout()

# Save the plot as an image file
chart_path = "/mnt/data/sales_chart.png"
plt.savefig(chart_path)
plt.close()

chart_path

